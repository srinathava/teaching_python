{
  "lessons": [
    {
      "slug": "variables",
      "title": "The Super Magic Label Maker",
      "description": "Learn how to store and use data with variables in Python",
      "order": 1,
      "icon": "🏷️",
      "exercises": [
        {
          "slug": "variables-1",
          "sequenceKey": 1.0,
          "title": "The Toy Organizer",
          "description": "Help organize the toy collection by creating variables for different toy counts!",
          "taskDescription": "Create variables for blocks, dolls, and cars with the counts shown in the boxes.",
          "initialCode": "# Create variables for toy counts\n# Example: blocks = 12",
          "solution": "blocks = 12\ndolls = 5\ncars = 8",
          "contentPath": "variables/exercises/1/content.svelte",
          "validationParams": {
            "concept": "variables",
            "expectedOutcome": "blocks = 12\ndolls = 5\ncars = 8"
          }
        },
        {
          "slug": "variables-2",
          "sequenceKey": 2.0,
          "title": "The Great Fruit Swap",
          "description": "Help two friends swap their fruits using variables!",
          "taskDescription": "Oh no! Alex has a banana but wants an apple, while Sam has an apple but wants a banana. Help them swap their fruits by using a temporary variable called 'temp'!",
          "initialCode": "# Alex and Sam need to swap their fruits!\nalex_fruit = \"banana\"\nsam_fruit = \"apple\"\n\n# Use temp to help swap the fruits\n",
          "solution": "alex_fruit = \"banana\"\nsam_fruit = \"apple\"\ntemp = alex_fruit\nalex_fruit = sam_fruit\nsam_fruit = temp",
          "contentPath": "variables/exercises/2/content.svelte",
          "validationParams": {
            "concept": "variables",
            "expectedOutcome": "alex_fruit = \"banana\"\nsam_fruit = \"apple\"\ntemp = alex_fruit\nalex_fruit = sam_fruit\nsam_fruit = temp"
          }
        }
      ]
    },
    {
      "slug": "operations",
      "title": "The Calculation Carnival",
      "description": "Learn how to perform calculations and work with different types of data",
      "order": 2,
      "icon": "🎡",
      "exercises": [
        {
          "slug": "operations-1",
          "sequenceKey": 1.0,
          "title": "The Number Juggler",
          "description": "Help the circus juggler add numbers together in this amazing show!",
          "taskDescription": "The circus juggler needs to count all the juggling balls! Add the numbers 5 and 3 together and store the result in a variable called 'sum'.",
          "initialCode": "# Add the juggling balls together\n# Store the result in 'sum'\n\n",
          "solution": "sum = 5 + 3",
          "contentPath": "operations/exercises/1/content.svelte",
          "validationParams": {
            "concept": "operations",
            "expectedOutcome": "sum = 5 + 3"
          }
        },
        {
          "slug": "operations-2",
          "sequenceKey": 2.0,
          "title": "The Circus Announcer",
          "description": "Help the circus announcer combine words to create the perfect announcement!",
          "taskDescription": "The circus announcer needs to create an announcement! Combine the strings \"Hello\" and \"World\" with a space between them, and store the result in a variable called 'message'.",
          "initialCode": "# Combine the strings with a space between them\n# Store the result in 'message'\n\n",
          "solution": "message = \"Hello\" + \" \" + \"World\"",
          "contentPath": "operations/exercises/2/content.svelte",
          "validationParams": {
            "concept": "operations",
            "expectedOutcome": "message = \"Hello\" + \" \" + \"World\""
          }
        },
        {
          "slug": "operations-banner",
          "sequenceKey": 3.0,
          "title": "The Circus Banner Maker",
          "description": "Help create personalized welcome banners for circus visitors using string formatting!",
          "taskDescription": "The circus needs to create personalized welcome banners for visitors. Use Python's f-string formatting to create a welcome message that includes the visitor's name and favorite act.",
          "initialCode": "# Visitor information\nvisitor_name = \"Alex\"\nfavorite_act = \"juggling\"\n\n# Create a welcome banner using f-string formatting\n# Store the result in 'welcome_banner'\n# Example: welcome_banner = f\"Welcome, {visitor_name}! Enjoy the {favorite_act} show!\"\n",
          "solution": "visitor_name = \"Alex\"\nfavorite_act = \"juggling\"\nwelcome_banner = f\"Welcome, {visitor_name}! Enjoy the {favorite_act} show!\"",
          "contentPath": "operations/exercises/banner/content.svelte",
          "validationParams": {
            "concept": "operations",
            "expectedOutcome": "visitor_name = \"Alex\"\nfavorite_act = \"juggling\"\nwelcome_banner = f\"Welcome, {visitor_name}! Enjoy the {favorite_act} show!\""
          }
        },
        {
          "slug": "operations-3",
          "sequenceKey": 4.0,
          "title": "The Circus Animal Feast",
          "description": "Calculate the total fruits needed for all the circus animals!",
          "taskDescription": "The circus animals are hungry! Each elephant needs 5 fruits, each monkey needs 3 fruits, and we have 2 elephants and 4 monkeys. Calculate the total fruits needed and store the result in 'total_fruits'.",
          "initialCode": "# Calculate the total fruits needed for all animals\n\n# Number of animals\nelephants = 2\nmonkeys = 4\n\n# Fruits per animal\nelephant_fruits = 5\nmonkey_fruits = 3\n\n# Calculate total fruits needed\n",
          "solution": "elephants = 2\nmonkeys = 4\nelephant_fruits = 5\nmonkey_fruits = 3\ntotal_fruits = (elephants * elephant_fruits) + (monkeys * monkey_fruits)",
          "contentPath": "operations/exercises/3/content.svelte",
          "validationParams": {
            "concept": "operations",
            "expectedOutcome": "elephants = 2\nmonkeys = 4\nelephant_fruits = 5\nmonkey_fruits = 3\ntotal_fruits = (elephants * elephant_fruits) + (monkeys * monkey_fruits)"
          }
        }
      ]
    },
    {
      "slug": "booleans",
      "title": "The Magical Truth Detector",
      "description": "Learn about boolean values and comparison operators in Python",
      "order": 3,
      "icon": "🔍",
      "exercises": [
        {
          "slug": "booleans-1",
          "sequenceKey": 1.0,
          "title": "The Circus Height Checker",
          "description": "Help the circus check if visitors are tall enough for the rides!",
          "taskDescription": "The roller coaster has a minimum height requirement of 140 cm. Create a variable called 'is_tall_enough' that checks if a visitor with height 145 cm meets this requirement.",
          "initialCode": "# Visitor's height in centimeters\nvisitor_height = 145\n\n# Minimum height required for the ride\nmin_height = 140\n\n# Check if the visitor is tall enough\n# Store the result in 'is_tall_enough'\n",
          "solution": "visitor_height = 145\nmin_height = 140\nis_tall_enough = visitor_height >= min_height",
          "contentPath": "booleans/exercises/1/content.svelte",
          "validationParams": {
            "concept": "booleans",
            "expectedOutcome": "visitor_height = 145\nmin_height = 140\nis_tall_enough = visitor_height >= min_height"
          }
        },
        {
          "slug": "booleans-2",
          "sequenceKey": 2.0,
          "title": "The Ticket Checker",
          "description": "Help the circus check if visitors have the right tickets!",
          "taskDescription": "The circus has different ticket types. Create a variable called 'has_correct_ticket' that checks if a visitor's ticket type matches the required ticket type for a show.",
          "initialCode": "# Visitor's ticket type\nvisitor_ticket = \"VIP\"\n\n# Required ticket type for the show\nrequired_ticket = \"VIP\"\n\n# Check if the visitor has the correct ticket\n# Store the result in 'has_correct_ticket'\n",
          "solution": "visitor_ticket = \"VIP\"\nrequired_ticket = \"VIP\"\nhas_correct_ticket = visitor_ticket == required_ticket",
          "contentPath": "booleans/exercises/2/content.svelte",
          "validationParams": {
            "concept": "booleans",
            "expectedOutcome": "visitor_ticket = \"VIP\"\nrequired_ticket = \"VIP\"\nhas_correct_ticket = visitor_ticket == required_ticket"
          }
        },
        {
          "slug": "booleans-3",
          "sequenceKey": 3.0,
          "title": "The Circus Ride Eligibility",
          "description": "Check if visitors are eligible for the thrilling circus rides!",
          "taskDescription": "The circus has a special ride with two requirements: visitors must be at least 12 years old AND at least 120 cm tall. Create a variable called 'can_ride' that checks if a visitor meets both requirements.",
          "initialCode": "# Visitor's age and height\nvisitor_age = 14\nvisitor_height = 130\n\n# Ride requirements\nmin_age = 12\nmin_height = 120\n\n# Check if the visitor can ride\n# Store the result in 'can_ride'\n",
          "solution": "visitor_age = 14\nvisitor_height = 130\nmin_age = 12\nmin_height = 120\ncan_ride = (visitor_age >= min_age) and (visitor_height >= min_height)",
          "contentPath": "booleans/exercises/3/content.svelte",
          "validationParams": {
            "concept": "booleans",
            "expectedOutcome": "visitor_age = 14\nvisitor_height = 130\nmin_age = 12\nmin_height = 120\ncan_ride = (visitor_age >= min_age) and (visitor_height >= min_height)"
          }
        }
      ]
    }
  ]
}